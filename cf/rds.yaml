AWSTemplateFormatVersion: "2010-09-09"
Description: Set up RDS Aurora cluster [managed by github.com/hms-dbmi-cellenics/iac]

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: The environment for which the cluster needs to be created.

  Region:
    Type: String
    Default: 'eu-west-1'
    Description: The region in which the cluster needs to be created.

# --------------------------------------- Constants ---------------------------------------
  DBClusterNameTemplate:
    Description: The base name for the database cluster without the environment in it
    Type: String
    Default: biomageAuroraCluster

  DBPort:
    Type: String
    Default: "5432"

  DBEngineVersion:
    Type: Number
    Default: 13.4

  DBSecretName:
    Description: The name of the secret used to store master user and password.
    Type: String
    Default: aurora-staging

  # DBAllocatedStorage:
  #   Description: The memory to be allocated for your database
  #   Type: Number

  # EnablePerformanceInsights:
  #   Description: A value that indicates whether to enable Performance Insights for the DB instance.
  #   Type: String
  #   Default: false

  # MultiAZ:
  #   Description: true, in case you wish to have a multi-AZ deployment
  #   Type: String
  #   Default: true

Outputs:
  RDSEndpoint:
    Description: RDS Database Endpoint
    Value:
      Fn::GetAtt:
        - DBInstance
        - Endpoint.Address
    # Export:
    #   Name:
    #     Fn::Sub: "RDSEndpoint"

Resources:
  DBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      Engine: aurora-postgresql
      EngineMode: provisioned
      EngineVersion: 13.4
      # DBClusterParameterGroupName: !Ref DBParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DatabaseName: !Join [ "", [ !Ref DBClusterNameTemplate, !Ref Environment ] ]
      Port: !Ref DBPort
      # Can't be deleted before first setting this to false
      DeletionProtection: false
      MasterUsername: !Join ["", ["{{resolve:secretsmanager:", !Ref DBSecretName, ":SecretString:username}}" ]]
      MasterUserPassword: !Join ["", ["{{resolve:secretsmanager:", !Ref DBSecretName, ":SecretString:password}}" ]]
      EnableIAMDatabaseAuthentication: true
      BackupRetentionPeriod: 5
      SourceRegion: !Ref Region
      # Check if we want to change this
      StorageEncrypted: false
      VpcSecurityGroupIds: 
        - !Ref RDSSecurityGroup

  # We might not need this
  # DBParameterGroup:
  #   Type: AWS::RDS::DBParameterGroup
  #   Properties:
  #     Description: !Join [ "- ", [ "Parameter Group for database instance", !Ref DBClusterNameTemplate ] ]
  #     Family: aurora-postgresql13
  #     # Parameters:
  #       # shared_preload_libraries: "pg_stat_statements, pg_hint_plan"
  #     Tags:
  #       - Key: "Name"
  #         Value: RdsParameterGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub Biomage subnet group for ${Environment}.
      DBSubnetGroupName: !Sub rds-subnet-group-${Environment}
      Tags:
        - Key: "Name"
          Value: AuroraSubnetGroupName
      SubnetIds:
        Fn::Split:
          - ','
          - Fn::ImportValue: !Sub "eksctl-biomage-${Environment}-cluster::SubnetsPrivate"

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.medium
      DBClusterIdentifier: !Ref DBCluster
      Engine: aurora-postgresql
      EngineVersion: !Ref DBEngineVersion
      # DBParameterGroupName: !Ref DBParameterGroup
      # MonitoringInterval: !If [IsProd, 1, 0]
      # MonitoringRoleArn: !If [IsProd, !GetAtt MonitoringIAMRole.Arn, !Ref "AWS::NoValue"]
      AutoMinorVersionUpgrade: true
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      EnablePerformanceInsights: true
      # PerformanceInsightsKMSKeyId: !Ref AuroraKMSCMK
      # PerformanceInsightsRetentionPeriod: !If [IsProd, 731, 7]
      # Tags:
      #   - Key: "Name"
      #     Value: mypostgresdb
      # DBName:
      #   !Ref: DBName
      # DBInstanceClass:
      #   !Ref: DBInstanceClass
      # Engine: aurora-postgresql
      # EngineVersion: 10.11
      # MasterUsername:
      #   !Ref: DBMasterUsername
      # MasterUserPassword:
      #   !Ref: DBMasterUserPassword
      # DBSubnetGroupName:
      #   !Ref: DBSubnetGroup
      # VPCSecurityGroups: 
      #   - !Ref RDSSecurityGroup
      # StorageType: gp2
      # StorageEncrypted: "false"
      # EnablePerformanceInsights:
      #   !Ref: EnablePerformanceInsights
      # AutoMinorVersionUpgrade: true
      # BackupRetentionPeriod: 7
      # PubliclyAccessible: false
  
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "Biomage RDS security group for ${Environment}"
      SecurityGroupEgress: []
      SecurityGroupIngress:
        - SourceSecurityGroupId: 
            Fn::ImportValue: !Sub "eksctl-biomage-${Environment}-cluster::SharedNodeSecurityGroup"
          FromPort: !Ref DBPort
          IpProtocol: tcp
          ToPort: !Ref DBPort
        # - SourceSecurityGroupId: 
        #     Fn::ImportValue: !Sub "eksctl-biomage-${Environment}-cluster::ClusterSecurityGroupId"
        #   FromPort: !Ref DBPort
        #   IpProtocol: tcp
        #   ToPort: !Ref DBPort
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-security-group"
        - Key: StackName
          Value: !Ref AWS::StackName
      VpcId:
        Fn::ImportValue:
          !Sub "eksctl-biomage-${Environment}-cluster::VPC"
  
# -----------------------------------------------------------------------------------------
# --------------------------------------- SSM resources -----------------------------------
# -----------------------------------------------------------------------------------------

# --------------------------------------- IAM Role ----------------------------------------
  SSMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: SSMInstanceProfile
      Roles: 
        - !Ref SSMRole

  SSMRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Basic SSM permissions for EC2
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore 
      RoleName: SSMInstanceProfile

# --------------------------------------- Security Groups ---------------------------------------

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable encrypted HTTP traffic only (in/out)
      VpcId:
        Fn::ImportValue:
          !Sub 'eksctl-biomage-${Environment}-cluster::VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0

# --------------------------------------- Services ---------------------------------------

  RDSAgent:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroupIds:
      - Ref: WebSecurityGroup
      IamInstanceProfile: !Ref SSMProfile
      ImageId: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
      Tags: 
        - Key: ShouldEcho
          Value: True
      SubnetId:
        Fn::Split:
            - ','
            - Fn::ImportValue: !Sub "eksctl-biomage-${Environment}-cluster::SubnetsPrivate"